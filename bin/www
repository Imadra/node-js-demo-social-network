#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('social-network:server');
var http = require('http');
var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost:27017/chat');
var User = require('../models/user');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app),
  io = require('socket.io').listen(server), users = {}, us = {}, ind = 0;
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports.chat = function(req, res, next) {
  var gr = ['A', 'B', 'C'];

  res.render('chat/index');

  var Chat = require('../models/Message.js');

  io.sockets.on('connection', function(socket) {
      //console.log('Connected ' + req.body.email + ' ' + Object.keys(users));
      var query = Chat.find({});
      query.sort('-created').limit(8).exec(function(err, docs) {
          if(err)
              throw err;
          socket.emit('load old msgs', docs);
      });

      socket.on('new user', function(callback) {
          User.findOne({'email':req.body.email}, function(err, user) {
              if(err){
                  callback(false);
              }
              if(!user) {
                  callback(false);
              }
              console.log('New user '+ req.body.email + ' ' + Object.keys(users));
              callback(true);
              socket.name = user.name;
              users[socket.name] = socket;
              us[socket.name] = ind++;
              /*console.log('---------------------------------');
              console.log('New user '+ req.body.email + ' ' + Object.keys(users));
              if(users['Rassul'] == users['Nurduman'])
                console.log("YES!");*/
              updateNicknames();
              socket.emit('starting message', {msg:'Hello ', nick: socket.name});
          });
      })

      socket.on('request grouplist', function(callback) {
          k = ['List of groups:'];
          for(var i=0;i<gr.length;i++) {
              k.push(gr[i]);
          }
          callback(null, k);
      });

      function updateNicknames() {
          io.sockets.emit('usernames', Object.keys(users));
      }

      socket.on('send message', function(data, callback) {
          var msg = data.trim();
          if(msg.length != 0) {
              if(msg.substring(0, 3) === '/w ') {
                  msg = msg.substr(3);
                  var ind = msg.indexOf(' ');
                  if(ind !== -1) {
                      var name = msg.substring(0, ind);
                      var msg = msg.substring(ind + 1);
                      if(name in users)
                      {
                          users[name].emit('whisper', {msg:msg, nick: socket.name});
                          console.log('Whisper!');
                      }
                      else {
                          callback('Error! Enter a valid user!');
                      }
                  }
                  else {
                      callback('Error. Please enter a message for your whisper!')
                  }
              }
              else {
                  var newMsg = new Chat({msg: msg, nick: socket.name});
                  newMsg.save(function(err) {
                      if(err)
                          throw(err);
                      io.sockets.emit('new message', {msg:msg, nick: socket.name});
                  })
              }
          }
      });

      socket.on('disconnect', function(data) {
          if(!socket.name)
              return;
          delete users[socket.name];
          updateNicknames();
      });
  });
}